{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { InteractionContext } from \"../context/InteractionProvider.js\";\nimport { useSeries } from \"../hooks/useSeries.js\";\nimport { useCartesianContext } from \"../context/CartesianProvider/index.js\";\nimport { ZAxisContext } from \"../context/ZAxisContextProvider.js\";\nimport { useColorProcessor } from \"../context/PluginProvider/useColorProcessor.js\";\nimport { getLabel } from \"../internals/getLabel.js\";\nimport { isCartesianSeriesType } from \"../internals/isCartesian.js\";\nimport { utcFormatter } from \"./utils.js\";\nexport function useAxisTooltip() {\n  var _usedAxis$valueFormat;\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const series = useSeries();\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = useCartesianContext();\n  const {\n    zAxis,\n    zAxisIds\n  } = React.useContext(ZAxisContext);\n  const colorProcessors = useColorProcessor();\n\n  // By default use the x-axis\n  const isXaxis = axis.x !== null && axis.x.index !== -1;\n  const axisData = isXaxis ? axis.x && axis.x : axis.y && axis.y;\n  if (axisData === null) {\n    return null;\n  }\n  const {\n    index: dataIndex,\n    value: axisValue\n  } = axisData;\n  const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];\n  const usedAxis = isXaxis ? xAxis[USED_AXIS_ID] : yAxis[USED_AXIS_ID];\n  const relevantSeries = Object.keys(series).filter(isCartesianSeriesType).flatMap(seriesType => {\n    const seriesOfType = series[seriesType];\n    if (!seriesOfType) {\n      return [];\n    }\n    return seriesOfType.seriesOrder.map(seriesId => {\n      var _seriesToAdd$xAxisId, _seriesToAdd$yAxisId;\n      const seriesToAdd = seriesOfType.series[seriesId];\n      const providedXAxisId = (_seriesToAdd$xAxisId = seriesToAdd.xAxisId) !== null && _seriesToAdd$xAxisId !== void 0 ? _seriesToAdd$xAxisId : seriesToAdd.xAxisKey;\n      const providedYAxisId = (_seriesToAdd$yAxisId = seriesToAdd.yAxisId) !== null && _seriesToAdd$yAxisId !== void 0 ? _seriesToAdd$yAxisId : seriesToAdd.yAxisKey;\n      const axisKey = isXaxis ? providedXAxisId : providedYAxisId;\n\n      // Test if the series uses the default axis\n      if (axisKey === undefined || axisKey === USED_AXIS_ID) {\n        var _ref, _seriesToAdd$zAxisId, _colorProcessors$seri, _colorProcessors$seri2, _seriesToAdd$data$dat, _getLabel;\n        const xAxisId = providedXAxisId !== null && providedXAxisId !== void 0 ? providedXAxisId : xAxisIds[0];\n        const yAxisId = providedYAxisId !== null && providedYAxisId !== void 0 ? providedYAxisId : yAxisIds[0];\n        const zAxisId = (_ref = (_seriesToAdd$zAxisId = seriesToAdd.zAxisId) !== null && _seriesToAdd$zAxisId !== void 0 ? _seriesToAdd$zAxisId : seriesToAdd.zAxisKey) !== null && _ref !== void 0 ? _ref : zAxisIds[0];\n        const color = (_colorProcessors$seri = (_colorProcessors$seri2 = colorProcessors[seriesType]) === null || _colorProcessors$seri2 === void 0 ? void 0 : _colorProcessors$seri2.call(colorProcessors, seriesToAdd, xAxis[xAxisId], yAxis[yAxisId], zAxisId && zAxis[zAxisId])(dataIndex)) !== null && _colorProcessors$seri !== void 0 ? _colorProcessors$seri : '';\n        const value = (_seriesToAdd$data$dat = seriesToAdd.data[dataIndex]) !== null && _seriesToAdd$data$dat !== void 0 ? _seriesToAdd$data$dat : null;\n        const formattedValue = seriesToAdd.valueFormatter(value, {\n          dataIndex\n        });\n        const formattedLabel = (_getLabel = getLabel(seriesToAdd.label, 'tooltip')) !== null && _getLabel !== void 0 ? _getLabel : null;\n        return {\n          seriesId,\n          color,\n          value,\n          formattedValue,\n          formattedLabel\n        };\n      }\n      return undefined;\n    });\n  }).filter(item => item != null);\n  const axisFormatter = (_usedAxis$valueFormat = usedAxis.valueFormatter) !== null && _usedAxis$valueFormat !== void 0 ? _usedAxis$valueFormat : v => usedAxis.scaleType === 'utc' ? utcFormatter(v) : v.toLocaleString();\n  const axisFormattedValue = axisFormatter(axisValue, {\n    location: 'tooltip'\n  });\n  return {\n    identifier: axis,\n    seriesItems: relevantSeries,\n    axisValue,\n    axisFormattedValue\n  };\n}","map":{"version":3,"names":["React","InteractionContext","useSeries","useCartesianContext","ZAxisContext","useColorProcessor","getLabel","isCartesianSeriesType","utcFormatter","useAxisTooltip","_usedAxis$valueFormat","axis","useContext","series","xAxis","yAxis","xAxisIds","yAxisIds","zAxis","zAxisIds","colorProcessors","isXaxis","x","index","axisData","y","dataIndex","value","axisValue","USED_AXIS_ID","usedAxis","relevantSeries","Object","keys","filter","flatMap","seriesType","seriesOfType","seriesOrder","map","seriesId","_seriesToAdd$xAxisId","_seriesToAdd$yAxisId","seriesToAdd","providedXAxisId","xAxisId","xAxisKey","providedYAxisId","yAxisId","yAxisKey","axisKey","undefined","_ref","_seriesToAdd$zAxisId","_colorProcessors$seri","_colorProcessors$seri2","_seriesToAdd$data$dat","_getLabel","zAxisId","zAxisKey","color","call","data","formattedValue","valueFormatter","formattedLabel","label","item","axisFormatter","v","scaleType","toLocaleString","axisFormattedValue","location","identifier","seriesItems"],"sources":["C:/narendra/Reactjs/Frontend/node_modules/@mui/x-charts/ChartsTooltip/useAxisTooltip.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { InteractionContext } from \"../context/InteractionProvider.js\";\nimport { useSeries } from \"../hooks/useSeries.js\";\nimport { useCartesianContext } from \"../context/CartesianProvider/index.js\";\nimport { ZAxisContext } from \"../context/ZAxisContextProvider.js\";\nimport { useColorProcessor } from \"../context/PluginProvider/useColorProcessor.js\";\nimport { getLabel } from \"../internals/getLabel.js\";\nimport { isCartesianSeriesType } from \"../internals/isCartesian.js\";\nimport { utcFormatter } from \"./utils.js\";\nexport function useAxisTooltip() {\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const series = useSeries();\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = useCartesianContext();\n  const {\n    zAxis,\n    zAxisIds\n  } = React.useContext(ZAxisContext);\n  const colorProcessors = useColorProcessor();\n\n  // By default use the x-axis\n  const isXaxis = axis.x !== null && axis.x.index !== -1;\n  const axisData = isXaxis ? axis.x && axis.x : axis.y && axis.y;\n  if (axisData === null) {\n    return null;\n  }\n  const {\n    index: dataIndex,\n    value: axisValue\n  } = axisData;\n  const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];\n  const usedAxis = isXaxis ? xAxis[USED_AXIS_ID] : yAxis[USED_AXIS_ID];\n  const relevantSeries = Object.keys(series).filter(isCartesianSeriesType).flatMap(seriesType => {\n    const seriesOfType = series[seriesType];\n    if (!seriesOfType) {\n      return [];\n    }\n    return seriesOfType.seriesOrder.map(seriesId => {\n      const seriesToAdd = seriesOfType.series[seriesId];\n      const providedXAxisId = seriesToAdd.xAxisId ?? seriesToAdd.xAxisKey;\n      const providedYAxisId = seriesToAdd.yAxisId ?? seriesToAdd.yAxisKey;\n      const axisKey = isXaxis ? providedXAxisId : providedYAxisId;\n\n      // Test if the series uses the default axis\n      if (axisKey === undefined || axisKey === USED_AXIS_ID) {\n        const xAxisId = providedXAxisId ?? xAxisIds[0];\n        const yAxisId = providedYAxisId ?? yAxisIds[0];\n        const zAxisId = seriesToAdd.zAxisId ?? seriesToAdd.zAxisKey ?? zAxisIds[0];\n        const color = colorProcessors[seriesType]?.(seriesToAdd, xAxis[xAxisId], yAxis[yAxisId], zAxisId && zAxis[zAxisId])(dataIndex) ?? '';\n        const value = seriesToAdd.data[dataIndex] ?? null;\n        const formattedValue = seriesToAdd.valueFormatter(value, {\n          dataIndex\n        });\n        const formattedLabel = getLabel(seriesToAdd.label, 'tooltip') ?? null;\n        return {\n          seriesId,\n          color,\n          value,\n          formattedValue,\n          formattedLabel\n        };\n      }\n      return undefined;\n    });\n  }).filter(item => item != null);\n  const axisFormatter = usedAxis.valueFormatter ?? (v => usedAxis.scaleType === 'utc' ? utcFormatter(v) : v.toLocaleString());\n  const axisFormattedValue = axisFormatter(axisValue, {\n    location: 'tooltip'\n  });\n  return {\n    identifier: axis,\n    seriesItems: relevantSeries,\n    axisValue,\n    axisFormattedValue\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
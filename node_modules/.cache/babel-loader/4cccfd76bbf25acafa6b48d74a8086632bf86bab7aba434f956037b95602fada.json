{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { defaultizeColor } from \"../../internals/defaultizeColor.js\";\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by the developer\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nexport const preprocessSeries = _ref => {\n  let {\n    series,\n    colors,\n    seriesFormatters,\n    dataset\n  } = _ref;\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    var _seriesGroups$type;\n    const {\n      id = \"auto-generated-id-\".concat(seriesIndex),\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (((_seriesGroups$type = seriesGroups[type]) === null || _seriesGroups$type === void 0 ? void 0 : _seriesGroups$type.series[id]) !== undefined) {\n      throw new Error(\"MUI X: series' id \\\"\".concat(id, \"\\\" is not unique.\"));\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formatter on a type group\n  Object.keys(seriesFormatters).forEach(type => {\n    const group = seriesGroups[type];\n    if (group !== undefined) {\n      var _seriesFormatters$typ, _seriesFormatters$typ2;\n      formattedSeries[type] = (_seriesFormatters$typ = (_seriesFormatters$typ2 = seriesFormatters[type]) === null || _seriesFormatters$typ2 === void 0 ? void 0 : _seriesFormatters$typ2.call(seriesFormatters, group, dataset)) !== null && _seriesFormatters$typ !== void 0 ? _seriesFormatters$typ : seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};","map":{"version":3,"names":["_extends","defaultizeColor","preprocessSeries","_ref","series","colors","seriesFormatters","dataset","seriesGroups","forEach","seriesData","seriesIndex","_seriesGroups$type","id","concat","type","undefined","seriesOrder","Error","push","formattedSeries","Object","keys","group","_seriesFormatters$typ","_seriesFormatters$typ2","call"],"sources":["C:/narendra/Reactjs/Frontend/node_modules/@mui/x-charts/context/SeriesProvider/processSeries.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { defaultizeColor } from \"../../internals/defaultizeColor.js\";\n/**\n * This methods is the interface between what the developer is providing and what components receives\n * To simplify the components behaviors, it groups series by type, such that LinePlots props are not updated if some line data are modified\n * It also add defaultized values such as the ids, colors\n * @param series The array of series provided by the developer\n * @param colors The color palette used to defaultize series colors\n * @returns An object structuring all the series by type.\n */\nexport const preprocessSeries = ({\n  series,\n  colors,\n  seriesFormatters,\n  dataset\n}) => {\n  // Group series by type\n  const seriesGroups = {};\n  series.forEach((seriesData, seriesIndex) => {\n    const {\n      id = `auto-generated-id-${seriesIndex}`,\n      type\n    } = seriesData;\n    if (seriesGroups[type] === undefined) {\n      seriesGroups[type] = {\n        series: {},\n        seriesOrder: []\n      };\n    }\n    if (seriesGroups[type]?.series[id] !== undefined) {\n      throw new Error(`MUI X: series' id \"${id}\" is not unique.`);\n    }\n    seriesGroups[type].series[id] = _extends({\n      id\n    }, defaultizeColor(seriesData, seriesIndex, colors));\n    seriesGroups[type].seriesOrder.push(id);\n  });\n  const formattedSeries = {};\n  // Apply formatter on a type group\n  Object.keys(seriesFormatters).forEach(type => {\n    const group = seriesGroups[type];\n    if (group !== undefined) {\n      formattedSeries[type] = seriesFormatters[type]?.(group, dataset) ?? seriesGroups[type];\n    }\n  });\n  return formattedSeries;\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,SAASC,eAAe,QAAQ,oCAAoC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGC,IAAA,IAK1B;EAAA,IAL2B;IAC/BC,MAAM;IACNC,MAAM;IACNC,gBAAgB;IAChBC;EACF,CAAC,GAAAJ,IAAA;EACC;EACA,MAAMK,YAAY,GAAG,CAAC,CAAC;EACvBJ,MAAM,CAACK,OAAO,CAAC,CAACC,UAAU,EAAEC,WAAW,KAAK;IAAA,IAAAC,kBAAA;IAC1C,MAAM;MACJC,EAAE,wBAAAC,MAAA,CAAwBH,WAAW,CAAE;MACvCI;IACF,CAAC,GAAGL,UAAU;IACd,IAAIF,YAAY,CAACO,IAAI,CAAC,KAAKC,SAAS,EAAE;MACpCR,YAAY,CAACO,IAAI,CAAC,GAAG;QACnBX,MAAM,EAAE,CAAC,CAAC;QACVa,WAAW,EAAE;MACf,CAAC;IACH;IACA,IAAI,EAAAL,kBAAA,GAAAJ,YAAY,CAACO,IAAI,CAAC,cAAAH,kBAAA,uBAAlBA,kBAAA,CAAoBR,MAAM,CAACS,EAAE,CAAC,MAAKG,SAAS,EAAE;MAChD,MAAM,IAAIE,KAAK,wBAAAJ,MAAA,CAAuBD,EAAE,sBAAkB,CAAC;IAC7D;IACAL,YAAY,CAACO,IAAI,CAAC,CAACX,MAAM,CAACS,EAAE,CAAC,GAAGb,QAAQ,CAAC;MACvCa;IACF,CAAC,EAAEZ,eAAe,CAACS,UAAU,EAAEC,WAAW,EAAEN,MAAM,CAAC,CAAC;IACpDG,YAAY,CAACO,IAAI,CAAC,CAACE,WAAW,CAACE,IAAI,CAACN,EAAE,CAAC;EACzC,CAAC,CAAC;EACF,MAAMO,eAAe,GAAG,CAAC,CAAC;EAC1B;EACAC,MAAM,CAACC,IAAI,CAAChB,gBAAgB,CAAC,CAACG,OAAO,CAACM,IAAI,IAAI;IAC5C,MAAMQ,KAAK,GAAGf,YAAY,CAACO,IAAI,CAAC;IAChC,IAAIQ,KAAK,KAAKP,SAAS,EAAE;MAAA,IAAAQ,qBAAA,EAAAC,sBAAA;MACvBL,eAAe,CAACL,IAAI,CAAC,IAAAS,qBAAA,IAAAC,sBAAA,GAAGnB,gBAAgB,CAACS,IAAI,CAAC,cAAAU,sBAAA,uBAAtBA,sBAAA,CAAAC,IAAA,CAAApB,gBAAgB,EAASiB,KAAK,EAAEhB,OAAO,CAAC,cAAAiB,qBAAA,cAAAA,qBAAA,GAAIhB,YAAY,CAACO,IAAI,CAAC;IACxF;EACF,CAAC,CAAC;EACF,OAAOK,eAAe;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
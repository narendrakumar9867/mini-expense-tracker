{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stack as d3Stack } from '@mui/x-charts-vendor/d3-shape';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { getStackingGroups } from \"../internals/stackSeries.js\";\nimport { defaultizeValueFormatter } from \"../internals/defaultizeValueFormatter.js\";\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = getStackingGroups(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset !== null && dataset !== void 0 ? dataset : [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([\"MUI X: bar series with id='\".concat(id, \"' has no data.\"), 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    const {\n      ids,\n      stackingOffset,\n      stackingOrder\n    } = stackingGroup;\n    // Get stacked values, and derive the domain\n    const stackedSeries = d3Stack().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => {\n      var _d$key;\n      return (_d$key = d[key]) !== null && _d$key !== void 0 ? _d$key : 0;\n    }) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = _extends({\n        layout: 'vertical'\n      }, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production') {\n              if (value !== null) {\n                warnOnce([\"MUI X: your dataset key \\\"\".concat(dataKey, \"\\\" is used for plotting bars, but contains nonnumerical elements.\"), 'Bar plots only support numbers and null values.']);\n              }\n            }\n            return 0;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(_ref => {\n          let [a, b] = _ref;\n          return [a, b];\n        })\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: defaultizeValueFormatter(completedSeries, v => v == null ? '' : v.toLocaleString())\n  };\n};\nexport default formatter;","map":{"version":3,"names":["_extends","stack","d3Stack","warnOnce","getStackingGroups","defaultizeValueFormatter","formatter","params","dataset","seriesOrder","series","stackingGroups","d3Dataset","forEach","id","data","undefined","value","index","length","push","Error","concat","join","completedSeries","stackingGroup","ids","stackingOffset","stackingOrder","stackedSeries","keys","map","dataKey","d","key","_d$key","order","offset","layout","process","env","NODE_ENV","stackedData","_ref","a","b","v","toLocaleString"],"sources":["C:/narendra/Reactjs/Frontend/node_modules/@mui/x-charts/BarChart/formatter.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { stack as d3Stack } from '@mui/x-charts-vendor/d3-shape';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { getStackingGroups } from \"../internals/stackSeries.js\";\nimport { defaultizeValueFormatter } from \"../internals/defaultizeValueFormatter.js\";\nconst formatter = (params, dataset) => {\n  const {\n    seriesOrder,\n    series\n  } = params;\n  const stackingGroups = getStackingGroups(params);\n\n  // Create a data set with format adapted to d3\n  const d3Dataset = dataset ?? [];\n  seriesOrder.forEach(id => {\n    const data = series[id].data;\n    if (data !== undefined) {\n      data.forEach((value, index) => {\n        if (d3Dataset.length <= index) {\n          d3Dataset.push({\n            [id]: value\n          });\n        } else {\n          d3Dataset[index][id] = value;\n        }\n      });\n    } else if (dataset === undefined) {\n      throw new Error([`MUI X: bar series with id='${id}' has no data.`, 'Either provide a data property to the series or use the dataset prop.'].join('\\n'));\n    }\n  });\n  const completedSeries = {};\n  stackingGroups.forEach(stackingGroup => {\n    const {\n      ids,\n      stackingOffset,\n      stackingOrder\n    } = stackingGroup;\n    // Get stacked values, and derive the domain\n    const stackedSeries = d3Stack().keys(ids.map(id => {\n      // Use dataKey if needed and available\n      const dataKey = series[id].dataKey;\n      return series[id].data === undefined && dataKey !== undefined ? dataKey : id;\n    })).value((d, key) => d[key] ?? 0) // defaultize null value to 0\n    .order(stackingOrder).offset(stackingOffset)(d3Dataset);\n    ids.forEach((id, index) => {\n      const dataKey = series[id].dataKey;\n      completedSeries[id] = _extends({\n        layout: 'vertical'\n      }, series[id], {\n        data: dataKey ? dataset.map(data => {\n          const value = data[dataKey];\n          if (typeof value !== 'number') {\n            if (process.env.NODE_ENV !== 'production') {\n              if (value !== null) {\n                warnOnce([`MUI X: your dataset key \"${dataKey}\" is used for plotting bars, but contains nonnumerical elements.`, 'Bar plots only support numbers and null values.']);\n              }\n            }\n            return 0;\n          }\n          return value;\n        }) : series[id].data,\n        stackedData: stackedSeries[index].map(([a, b]) => [a, b])\n      });\n    });\n  });\n  return {\n    seriesOrder,\n    stackingGroups,\n    series: defaultizeValueFormatter(completedSeries, v => v == null ? '' : v.toLocaleString())\n  };\n};\nexport default formatter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { base64Decode, base64Encode } from \"../encoding/base64.js\";\nimport { md5 } from \"../encoding/md5.js\";\nimport { LICENSE_STATUS } from \"../utils/licenseStatus.js\";\nimport { PLAN_SCOPES } from \"../utils/plan.js\";\nimport { LICENSE_MODELS } from \"../utils/licenseModel.js\";\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\nexport function generateReleaseInfo(releaseDate = getDefaultReleaseDate()) {\n  return base64Encode(releaseDate.getTime().toString());\n}\nfunction isPlanScopeSufficient(packageName, planScope) {\n  let acceptedScopes;\n  if (packageName.includes('-pro')) {\n    acceptedScopes = ['pro', 'premium'];\n  } else if (packageName.includes('-premium')) {\n    acceptedScopes = ['premium'];\n  } else {\n    acceptedScopes = [];\n  }\n  return acceptedScopes.includes(planScope);\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\nconst PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN = ['x-data-grid-pro', 'x-date-pickers-pro'];\n\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n  return {\n    planScope: 'pro',\n    licenseModel: 'perpetual',\n    expiryTimestamp,\n    planVersion: 'initial'\n  };\n};\n\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${planScope},LM=${licenseModel},PV=${planVersion},KV=2`;\n */\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    planScope: null,\n    licenseModel: null,\n    expiryTimestamp: null,\n    planVersion: 'initial'\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(([key, value]) => {\n    if (key === 'S') {\n      licenseInfo.planScope = value;\n    }\n    if (key === 'LM') {\n      licenseInfo.licenseModel = value;\n    }\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n    if (key === 'PV') {\n      licenseInfo.planVersion = value;\n    }\n  });\n  return licenseInfo;\n};\n\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n  return null;\n};\nexport function verifyLicense({\n  releaseInfo,\n  licenseKey,\n  packageName\n}) {\n  if (!releaseInfo) {\n    throw new Error('MUI X: The release information is missing. Not able to validate license.');\n  }\n  if (!licenseKey) {\n    return {\n      status: LICENSE_STATUS.NotFound\n    };\n  }\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n  if (hash !== md5(encoded)) {\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  const license = decodeLicense(encoded);\n  if (license == null) {\n    console.error('MUI X: Error checking license. Key version not found!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licenseModel == null || !LICENSE_MODELS.includes(license.licenseModel)) {\n    console.error('MUI X: Error checking license. Licensing model not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.expiryTimestamp == null) {\n    console.error('MUI X: Error checking license. Expiry timestamp not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licenseModel === 'perpetual' || process.env.NODE_ENV === 'production') {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI X: The release information is invalid. Not able to validate license.');\n    }\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return {\n        status: LICENSE_STATUS.ExpiredVersion\n      };\n    }\n  } else if (license.licenseModel === 'subscription' || license.licenseModel === 'annual') {\n    if (new Date().getTime() > license.expiryTimestamp) {\n      if (\n      // 30 days grace\n      new Date().getTime() < license.expiryTimestamp + 1000 * 3600 * 24 * 30 || process.env.NODE_ENV !== 'development') {\n        return {\n          status: LICENSE_STATUS.ExpiredAnnualGrace,\n          meta: {\n            expiryTimestamp: license.expiryTimestamp,\n            licenseKey\n          }\n        };\n      }\n      return {\n        status: LICENSE_STATUS.ExpiredAnnual,\n        meta: {\n          expiryTimestamp: license.expiryTimestamp,\n          licenseKey\n        }\n      };\n    }\n  }\n  if (license.planScope == null || !PLAN_SCOPES.includes(license.planScope)) {\n    console.error('MUI X: Error checking license. planScope not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (!isPlanScopeSufficient(packageName, license.planScope)) {\n    return {\n      status: LICENSE_STATUS.OutOfScope\n    };\n  }\n\n  // 'charts-pro' or 'tree-view-pro' can only be used with a newer Pro license\n  if (license.planVersion === 'initial' && license.planScope === 'pro' && !PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN.includes(packageName)) {\n    return {\n      status: LICENSE_STATUS.NotAvailableInInitialProPlan\n    };\n  }\n  return {\n    status: LICENSE_STATUS.Valid\n  };\n}","map":{"version":3,"names":["base64Decode","base64Encode","md5","LICENSE_STATUS","PLAN_SCOPES","LICENSE_MODELS","getDefaultReleaseDate","today","Date","setHours","generateReleaseInfo","releaseDate","getTime","toString","isPlanScopeSufficient","packageName","planScope","acceptedScopes","includes","expiryReg","PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN","decodeLicenseVersion1","license","expiryTimestamp","parseInt","match","Number","isNaN","err","licenseModel","planVersion","decodeLicenseVersion2","licenseInfo","split","map","token","filter","el","length","forEach","key","value","decodeLicense","encodedLicense","verifyLicense","releaseInfo","licenseKey","Error","status","NotFound","hash","substr","encoded","Invalid","console","error","process","env","NODE_ENV","pkgTimestamp","ExpiredVersion","ExpiredAnnualGrace","meta","ExpiredAnnual","OutOfScope","NotAvailableInInitialProPlan","Valid"],"sources":["C:/narendra/Reactjs/mini-expense-tracker/node_modules/@mui/x-license/verifyLicense/verifyLicense.js"],"sourcesContent":["import { base64Decode, base64Encode } from \"../encoding/base64.js\";\nimport { md5 } from \"../encoding/md5.js\";\nimport { LICENSE_STATUS } from \"../utils/licenseStatus.js\";\nimport { PLAN_SCOPES } from \"../utils/plan.js\";\nimport { LICENSE_MODELS } from \"../utils/licenseModel.js\";\nconst getDefaultReleaseDate = () => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  return today;\n};\nexport function generateReleaseInfo(releaseDate = getDefaultReleaseDate()) {\n  return base64Encode(releaseDate.getTime().toString());\n}\nfunction isPlanScopeSufficient(packageName, planScope) {\n  let acceptedScopes;\n  if (packageName.includes('-pro')) {\n    acceptedScopes = ['pro', 'premium'];\n  } else if (packageName.includes('-premium')) {\n    acceptedScopes = ['premium'];\n  } else {\n    acceptedScopes = [];\n  }\n  return acceptedScopes.includes(planScope);\n}\nconst expiryReg = /^.*EXPIRY=([0-9]+),.*$/;\nconst PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN = ['x-data-grid-pro', 'x-date-pickers-pro'];\n\n/**\n * Format: ORDER:${orderNumber},EXPIRY=${expiryTimestamp},KEYVERSION=1\n */\nconst decodeLicenseVersion1 = license => {\n  let expiryTimestamp;\n  try {\n    expiryTimestamp = parseInt(license.match(expiryReg)[1], 10);\n    if (!expiryTimestamp || Number.isNaN(expiryTimestamp)) {\n      expiryTimestamp = null;\n    }\n  } catch (err) {\n    expiryTimestamp = null;\n  }\n  return {\n    planScope: 'pro',\n    licenseModel: 'perpetual',\n    expiryTimestamp,\n    planVersion: 'initial'\n  };\n};\n\n/**\n * Format: O=${orderNumber},E=${expiryTimestamp},S=${planScope},LM=${licenseModel},PV=${planVersion},KV=2`;\n */\nconst decodeLicenseVersion2 = license => {\n  const licenseInfo = {\n    planScope: null,\n    licenseModel: null,\n    expiryTimestamp: null,\n    planVersion: 'initial'\n  };\n  license.split(',').map(token => token.split('=')).filter(el => el.length === 2).forEach(([key, value]) => {\n    if (key === 'S') {\n      licenseInfo.planScope = value;\n    }\n    if (key === 'LM') {\n      licenseInfo.licenseModel = value;\n    }\n    if (key === 'E') {\n      const expiryTimestamp = parseInt(value, 10);\n      if (expiryTimestamp && !Number.isNaN(expiryTimestamp)) {\n        licenseInfo.expiryTimestamp = expiryTimestamp;\n      }\n    }\n    if (key === 'PV') {\n      licenseInfo.planVersion = value;\n    }\n  });\n  return licenseInfo;\n};\n\n/**\n * Decode the license based on its key version and return a version-agnostic `MuiLicense` object.\n */\nconst decodeLicense = encodedLicense => {\n  const license = base64Decode(encodedLicense);\n  if (license.includes('KEYVERSION=1')) {\n    return decodeLicenseVersion1(license);\n  }\n  if (license.includes('KV=2')) {\n    return decodeLicenseVersion2(license);\n  }\n  return null;\n};\nexport function verifyLicense({\n  releaseInfo,\n  licenseKey,\n  packageName\n}) {\n  if (!releaseInfo) {\n    throw new Error('MUI X: The release information is missing. Not able to validate license.');\n  }\n  if (!licenseKey) {\n    return {\n      status: LICENSE_STATUS.NotFound\n    };\n  }\n  const hash = licenseKey.substr(0, 32);\n  const encoded = licenseKey.substr(32);\n  if (hash !== md5(encoded)) {\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  const license = decodeLicense(encoded);\n  if (license == null) {\n    console.error('MUI X: Error checking license. Key version not found!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licenseModel == null || !LICENSE_MODELS.includes(license.licenseModel)) {\n    console.error('MUI X: Error checking license. Licensing model not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.expiryTimestamp == null) {\n    console.error('MUI X: Error checking license. Expiry timestamp not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (license.licenseModel === 'perpetual' || process.env.NODE_ENV === 'production') {\n    const pkgTimestamp = parseInt(base64Decode(releaseInfo), 10);\n    if (Number.isNaN(pkgTimestamp)) {\n      throw new Error('MUI X: The release information is invalid. Not able to validate license.');\n    }\n    if (license.expiryTimestamp < pkgTimestamp) {\n      return {\n        status: LICENSE_STATUS.ExpiredVersion\n      };\n    }\n  } else if (license.licenseModel === 'subscription' || license.licenseModel === 'annual') {\n    if (new Date().getTime() > license.expiryTimestamp) {\n      if (\n      // 30 days grace\n      new Date().getTime() < license.expiryTimestamp + 1000 * 3600 * 24 * 30 || process.env.NODE_ENV !== 'development') {\n        return {\n          status: LICENSE_STATUS.ExpiredAnnualGrace,\n          meta: {\n            expiryTimestamp: license.expiryTimestamp,\n            licenseKey\n          }\n        };\n      }\n      return {\n        status: LICENSE_STATUS.ExpiredAnnual,\n        meta: {\n          expiryTimestamp: license.expiryTimestamp,\n          licenseKey\n        }\n      };\n    }\n  }\n  if (license.planScope == null || !PLAN_SCOPES.includes(license.planScope)) {\n    console.error('MUI X: Error checking license. planScope not found or invalid!');\n    return {\n      status: LICENSE_STATUS.Invalid\n    };\n  }\n  if (!isPlanScopeSufficient(packageName, license.planScope)) {\n    return {\n      status: LICENSE_STATUS.OutOfScope\n    };\n  }\n\n  // 'charts-pro' or 'tree-view-pro' can only be used with a newer Pro license\n  if (license.planVersion === 'initial' && license.planScope === 'pro' && !PRO_PACKAGES_AVAILABLE_IN_INITIAL_PRO_PLAN.includes(packageName)) {\n    return {\n      status: LICENSE_STATUS.NotAvailableInInitialProPlan\n    };\n  }\n  return {\n    status: LICENSE_STATUS.Valid\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
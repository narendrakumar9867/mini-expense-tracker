import type { ResponsiveChartContainerProProps } from './ResponsiveChartContainerPro';
export declare const useResponsiveChartContainerProProps: (props: ResponsiveChartContainerProProps, ref: React.ForwardedRef<unknown>) => {
    chartContainerProProps: {
        zoom?: import("..").ZoomData[] | undefined;
        onZoomChange?: ((zoomData: import("..").ZoomData[] | ((zoomData: import("..").ZoomData[]) => import("..").ZoomData[])) => void) | undefined;
        title?: string | undefined;
        desc?: string | undefined;
        sx?: import("@mui/system").SxProps<import("@mui/material").Theme> | undefined;
        width: number;
        className?: string | undefined;
        height: number;
        viewBox?: {
            x?: number;
            y?: number;
            width?: number;
            height?: number;
        } | undefined;
        margin?: Partial<import("@mui/x-charts").CardinalDirections<number>> | undefined;
        plugins?: import("@mui/x-charts/internals").ChartsPlugin<import("@mui/x-charts/internals").ChartSeriesType>[] | undefined;
        dataset?: import("@mui/x-charts/internals").DatasetType | undefined;
        series: (import("../models").HeatmapSeriesType | import("@mui/x-charts").LineSeriesType | import("@mui/x-charts").BarSeriesType | import("@mui/x-charts").ScatterSeriesType | import("@mui/x-charts").PieSeriesType<import("@mui/x-charts/internals").MakeOptional<import("@mui/x-charts").PieValueType, "id">>)[];
        colors?: import("@mui/x-charts").ChartsColorPalette | undefined;
        zAxis?: import("@mui/x-charts/internals").MakeOptional<import("@mui/x-charts/internals").ZAxisConfig, "id">[] | undefined;
        highlightedItem?: (import("@mui/x-charts").HighlightItemData | null) | undefined;
        onHighlightChange?: ((highlightedItem: import("@mui/x-charts").HighlightItemData | null) => void) | undefined;
        skipAnimation?: boolean | undefined;
        disableAxisListener?: boolean | undefined;
        xAxis?: import("@mui/x-charts/internals").MakeOptional<import("@mui/x-charts").AxisConfig<import("@mui/x-charts").ScaleName, any, import("@mui/x-charts").ChartsXAxisProps>, "id">[];
        yAxis?: import("@mui/x-charts/internals").MakeOptional<import("@mui/x-charts").AxisConfig<import("@mui/x-charts").ScaleName, any, import("@mui/x-charts").ChartsYAxisProps>, "id">[];
        children?: React.ReactNode;
        ref: React.ForwardedRef<unknown>;
    };
    resizableChartContainerProps: {
        ownerState: {
            width: number | undefined;
            height: number | undefined;
        };
        ref: import("react").RefObject<null>;
        className?: string | undefined;
    };
    hasIntrinsicSize: number;
};
